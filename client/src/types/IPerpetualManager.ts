/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPerpetualOrder {
  export type OrderStruct = {
    leverageTDR: PromiseOrValue<BigNumberish>;
    brokerFeeTbps: PromiseOrValue<BigNumberish>;
    iPerpetualId: PromiseOrValue<BigNumberish>;
    traderAddr: PromiseOrValue<string>;
    executionTimestamp: PromiseOrValue<BigNumberish>;
    brokerAddr: PromiseOrValue<string>;
    submittedTimestamp: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
    iDeadline: PromiseOrValue<BigNumberish>;
    executorAddr: PromiseOrValue<string>;
    fAmount: PromiseOrValue<BigNumberish>;
    fLimitPrice: PromiseOrValue<BigNumberish>;
    fTriggerPrice: PromiseOrValue<BigNumberish>;
    brokerSignature: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    number,
    number,
    number,
    string,
    number,
    string,
    number,
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    leverageTDR: number;
    brokerFeeTbps: number;
    iPerpetualId: number;
    traderAddr: string;
    executionTimestamp: number;
    brokerAddr: string;
    submittedTimestamp: number;
    flags: number;
    iDeadline: number;
    executorAddr: string;
    fAmount: BigNumber;
    fLimitPrice: BigNumber;
    fTriggerPrice: BigNumber;
    brokerSignature: string;
  };
}

export declare namespace AMMPerpLogic {
  export type AMMVariablesStruct = {
    fLockedValue1: PromiseOrValue<BigNumberish>;
    fPoolM1: PromiseOrValue<BigNumberish>;
    fPoolM2: PromiseOrValue<BigNumberish>;
    fPoolM3: PromiseOrValue<BigNumberish>;
    fAMM_K2: PromiseOrValue<BigNumberish>;
    fCurrentTraderExposureEMA: PromiseOrValue<BigNumberish>;
  };

  export type AMMVariablesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fLockedValue1: BigNumber;
    fPoolM1: BigNumber;
    fPoolM2: BigNumber;
    fPoolM3: BigNumber;
    fAMM_K2: BigNumber;
    fCurrentTraderExposureEMA: BigNumber;
  };

  export type MarketVariablesStruct = {
    fIndexPriceS2: PromiseOrValue<BigNumberish>;
    fIndexPriceS3: PromiseOrValue<BigNumberish>;
    fSigma2: PromiseOrValue<BigNumberish>;
    fSigma3: PromiseOrValue<BigNumberish>;
    fRho23: PromiseOrValue<BigNumberish>;
  };

  export type MarketVariablesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fIndexPriceS2: BigNumber;
    fIndexPriceS3: BigNumber;
    fSigma2: BigNumber;
    fSigma3: BigNumber;
    fRho23: BigNumber;
  };
}

export declare namespace PerpStorage {
  export type LiquidityPoolDataStruct = {
    isRunning: PromiseOrValue<boolean>;
    iPerpetualCount: PromiseOrValue<BigNumberish>;
    id: PromiseOrValue<BigNumberish>;
    fCeilPnLShare: PromiseOrValue<BigNumberish>;
    marginTokenDecimals: PromiseOrValue<BigNumberish>;
    iTargetPoolSizeUpdateTime: PromiseOrValue<BigNumberish>;
    marginTokenAddress: PromiseOrValue<string>;
    prevAnchor: PromiseOrValue<BigNumberish>;
    fRedemptionRate: PromiseOrValue<BigNumberish>;
    shareTokenAddress: PromiseOrValue<string>;
    fPnLparticipantsCashCC: PromiseOrValue<BigNumberish>;
    fTargetAMMFundSize: PromiseOrValue<BigNumberish>;
    fDefaultFundCashCC: PromiseOrValue<BigNumberish>;
    fTargetDFSize: PromiseOrValue<BigNumberish>;
    fBrokerCollateralLotSize: PromiseOrValue<BigNumberish>;
    prevTokenAmount: PromiseOrValue<BigNumberish>;
    nextTokenAmount: PromiseOrValue<BigNumberish>;
    totalSupplyShareToken: PromiseOrValue<BigNumberish>;
    fBrokerFundCashCC: PromiseOrValue<BigNumberish>;
  };

  export type LiquidityPoolDataStructOutput = [
    boolean,
    number,
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isRunning: boolean;
    iPerpetualCount: number;
    id: number;
    fCeilPnLShare: number;
    marginTokenDecimals: number;
    iTargetPoolSizeUpdateTime: number;
    marginTokenAddress: string;
    prevAnchor: BigNumber;
    fRedemptionRate: BigNumber;
    shareTokenAddress: string;
    fPnLparticipantsCashCC: BigNumber;
    fTargetAMMFundSize: BigNumber;
    fDefaultFundCashCC: BigNumber;
    fTargetDFSize: BigNumber;
    fBrokerCollateralLotSize: BigNumber;
    prevTokenAmount: BigNumber;
    nextTokenAmount: BigNumber;
    totalSupplyShareToken: BigNumber;
    fBrokerFundCashCC: BigNumber;
  };

  export type MarginAccountStruct = {
    fLockedInValueQC: PromiseOrValue<BigNumberish>;
    fCashCC: PromiseOrValue<BigNumberish>;
    fPositionBC: PromiseOrValue<BigNumberish>;
    fUnitAccumulatedFundingStart: PromiseOrValue<BigNumberish>;
    slot2: PromiseOrValue<BigNumberish>;
    slot3: PromiseOrValue<BigNumberish>;
    slot4: PromiseOrValue<BigNumberish>;
    slot: PromiseOrValue<BytesLike>;
  };

  export type MarginAccountStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    string
  ] & {
    fLockedInValueQC: BigNumber;
    fCashCC: BigNumber;
    fPositionBC: BigNumber;
    fUnitAccumulatedFundingStart: BigNumber;
    slot2: BigNumber;
    slot3: number;
    slot4: number;
    slot: string;
  };

  export type PriceTimeDataStruct = {
    fPrice: PromiseOrValue<BigNumberish>;
    time: PromiseOrValue<BigNumberish>;
  };

  export type PriceTimeDataStructOutput = [BigNumber, BigNumber] & {
    fPrice: BigNumber;
    time: BigNumber;
  };

  export type PerpetualDataStruct = {
    poolId: PromiseOrValue<BigNumberish>;
    id: PromiseOrValue<BigNumberish>;
    fInitialMarginRate: PromiseOrValue<BigNumberish>;
    fSigma2: PromiseOrValue<BigNumberish>;
    iLastFundingTime: PromiseOrValue<BigNumberish>;
    slot0: PromiseOrValue<BigNumberish>;
    slot1: PromiseOrValue<BigNumberish>;
    fMaintenanceMarginRate: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
    eCollateralCurrency: PromiseOrValue<BigNumberish>;
    minimalSpreadTbps: PromiseOrValue<BigNumberish>;
    S2BaseCCY: PromiseOrValue<BytesLike>;
    S2QuoteCCY: PromiseOrValue<BytesLike>;
    incentiveSpreadTbps: PromiseOrValue<BigNumberish>;
    slot2: PromiseOrValue<BigNumberish>;
    S3BaseCCY: PromiseOrValue<BytesLike>;
    S3QuoteCCY: PromiseOrValue<BytesLike>;
    fSigma3: PromiseOrValue<BigNumberish>;
    fRho23: PromiseOrValue<BigNumberish>;
    liquidationPenaltyRateTbps: PromiseOrValue<BigNumberish>;
    currentMarkPremiumRate: PerpStorage.PriceTimeDataStruct;
    premiumRatesEMA: PromiseOrValue<BigNumberish>;
    fUnitAccumulatedFunding: PromiseOrValue<BigNumberish>;
    fOpenInterest: PromiseOrValue<BigNumberish>;
    fTargetAMMFundSize: PromiseOrValue<BigNumberish>;
    fCurrentTraderExposureEMA: PromiseOrValue<BigNumberish>;
    fCurrentFundingRate: PromiseOrValue<BigNumberish>;
    fLotSizeBC: PromiseOrValue<BigNumberish>;
    fReferralRebateCC: PromiseOrValue<BigNumberish>;
    fTargetDFSize: PromiseOrValue<BigNumberish>;
    fkStar: PromiseOrValue<BigNumberish>;
    fAMMTargetDD: PromiseOrValue<BigNumberish>;
    fAMMMinSizeCC: PromiseOrValue<BigNumberish>;
    fMinimalTraderExposureEMA: PromiseOrValue<BigNumberish>;
    fMinimalAMMExposureEMA: PromiseOrValue<BigNumberish>;
    fSettlementS3PriceData: PromiseOrValue<BigNumberish>;
    fSettlementS2PriceData: PromiseOrValue<BigNumberish>;
    fTotalMarginBalance: PromiseOrValue<BigNumberish>;
    fMarkPriceEMALambda: PromiseOrValue<BigNumberish>;
    fFundingRateClamp: PromiseOrValue<BigNumberish>;
    fMaximalTradeSizeBumpUp: PromiseOrValue<BigNumberish>;
    iLastTargetPoolSizeTime: PromiseOrValue<BigNumberish>;
    fDFCoverNRate: PromiseOrValue<BigNumberish>;
    fStressReturnS3: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    fDFLambda: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    fCurrentAMMExposureEMA: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    fStressReturnS2: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type PerpetualDataStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    number,
    number,
    string,
    string,
    number,
    number,
    number,
    PerpStorage.PriceTimeDataStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber],
    [BigNumber, BigNumber]
  ] & {
    poolId: number;
    id: number;
    fInitialMarginRate: number;
    fSigma2: number;
    iLastFundingTime: number;
    slot0: number;
    slot1: number;
    fMaintenanceMarginRate: number;
    state: number;
    eCollateralCurrency: number;
    minimalSpreadTbps: number;
    S2BaseCCY: string;
    S2QuoteCCY: string;
    incentiveSpreadTbps: number;
    slot2: number;
    S3BaseCCY: string;
    S3QuoteCCY: string;
    fSigma3: number;
    fRho23: number;
    liquidationPenaltyRateTbps: number;
    currentMarkPremiumRate: PerpStorage.PriceTimeDataStructOutput;
    premiumRatesEMA: BigNumber;
    fUnitAccumulatedFunding: BigNumber;
    fOpenInterest: BigNumber;
    fTargetAMMFundSize: BigNumber;
    fCurrentTraderExposureEMA: BigNumber;
    fCurrentFundingRate: BigNumber;
    fLotSizeBC: BigNumber;
    fReferralRebateCC: BigNumber;
    fTargetDFSize: BigNumber;
    fkStar: BigNumber;
    fAMMTargetDD: BigNumber;
    fAMMMinSizeCC: BigNumber;
    fMinimalTraderExposureEMA: BigNumber;
    fMinimalAMMExposureEMA: BigNumber;
    fSettlementS3PriceData: BigNumber;
    fSettlementS2PriceData: BigNumber;
    fTotalMarginBalance: BigNumber;
    fMarkPriceEMALambda: number;
    fFundingRateClamp: number;
    fMaximalTradeSizeBumpUp: number;
    iLastTargetPoolSizeTime: number;
    fDFCoverNRate: number;
    fStressReturnS3: [BigNumber, BigNumber];
    fDFLambda: [BigNumber, BigNumber];
    fCurrentAMMExposureEMA: [BigNumber, BigNumber];
    fStressReturnS2: [BigNumber, BigNumber];
  };
}

export declare namespace IPerpetualInfo {
  export type PerpetualStaticInfoStruct = {
    id: PromiseOrValue<BigNumberish>;
    limitOrderBookAddr: PromiseOrValue<string>;
    fInitialMarginRate: PromiseOrValue<BigNumberish>;
    fMaintenanceMarginRate: PromiseOrValue<BigNumberish>;
    perpetualState: PromiseOrValue<BigNumberish>;
    collCurrencyType: PromiseOrValue<BigNumberish>;
    S2BaseCCY: PromiseOrValue<BytesLike>;
    S2QuoteCCY: PromiseOrValue<BytesLike>;
    S3BaseCCY: PromiseOrValue<BytesLike>;
    S3QuoteCCY: PromiseOrValue<BytesLike>;
    fLotSizeBC: PromiseOrValue<BigNumberish>;
    fReferralRebateCC: PromiseOrValue<BigNumberish>;
    priceIds: PromiseOrValue<BytesLike>[];
    isPyth: PromiseOrValue<boolean>[];
  };

  export type PerpetualStaticInfoStructOutput = [
    number,
    string,
    number,
    number,
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string[],
    boolean[]
  ] & {
    id: number;
    limitOrderBookAddr: string;
    fInitialMarginRate: number;
    fMaintenanceMarginRate: number;
    perpetualState: number;
    collCurrencyType: number;
    S2BaseCCY: string;
    S2QuoteCCY: string;
    S3BaseCCY: string;
    S3QuoteCCY: string;
    fLotSizeBC: BigNumber;
    fReferralRebateCC: BigNumber;
    priceIds: string[];
    isPyth: boolean[];
  };
}

export declare namespace IPerpetualTreasury {
  export type WithdrawRequestStruct = {
    lp: PromiseOrValue<string>;
    shareTokens: PromiseOrValue<BigNumberish>;
    withdrawTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawRequestStructOutput = [string, BigNumber, BigNumber] & {
    lp: string;
    shareTokens: BigNumber;
    withdrawTimestamp: BigNumber;
  };
}

export interface IPerpetualManagerInterface extends utils.Interface {
  functions: {
    "activatePerpetual(uint24)": FunctionFragment;
    "addLiquidity(uint8,uint256)": FunctionFragment;
    "adjustSettlementPrice(uint24,int128,int128)": FunctionFragment;
    "calculateDefaultFundSize(int128[2],int128,int128,int128[2],int128[2],int128[2],uint8)": FunctionFragment;
    "calculatePerpetualPrice((int128,int128,int128,int128,int128,int128),(int128,int128,int128,int128,int128),int128,int128,int128)": FunctionFragment;
    "calculateRiskNeutralPD((int128,int128,int128,int128,int128,int128),(int128,int128,int128,int128,int128),int128,bool)": FunctionFragment;
    "countActivePerpAccounts(uint24)": FunctionFragment;
    "createLiquidityPool(address,uint16,int128,int128)": FunctionFragment;
    "createPerpetual(uint8,bytes4[2],bytes4[2],int128[7],int128[5],int128[12],uint256)": FunctionFragment;
    "deactivatePerp(uint24)": FunctionFragment;
    "decreasePoolCash(uint8,int128)": FunctionFragment;
    "deposit(uint24,address,int128,bytes[],uint64[])": FunctionFragment;
    "depositBrokerLots(uint8,uint32)": FunctionFragment;
    "depositMarginForOpeningTrade(uint24,int128,(uint16,uint16,uint24,address,uint32,address,uint32,uint32,uint32,address,int128,int128,int128,bytes))": FunctionFragment;
    "depositToDefaultFund(uint8,int128)": FunctionFragment;
    "determineExchangeFee((uint16,uint16,uint24,address,uint32,address,uint32,uint32,uint32,address,int128,int128,int128,bytes))": FunctionFragment;
    "distributeFees((uint16,uint16,uint24,address,uint32,address,uint32,uint32,uint32,address,int128,int128,int128,bytes),uint16,uint16,bool)": FunctionFragment;
    "distributeFeesLiquidation(uint24,address,int128,uint16)": FunctionFragment;
    "executeCancelOrder(uint24,bytes32)": FunctionFragment;
    "executeLiquidityWithdrawal(uint8,address)": FunctionFragment;
    "executeTrade(uint24,address,int128,int128,int128,bool)": FunctionFragment;
    "getAMMPerpLogic()": FunctionFragment;
    "getAMMState(uint24,int128[2])": FunctionFragment;
    "getActivePerpAccounts(uint24)": FunctionFragment;
    "getActivePerpAccountsByChunks(uint24,uint256,uint256)": FunctionFragment;
    "getBrokerDesignation(uint8,address)": FunctionFragment;
    "getBrokerInducedFee(uint8,address)": FunctionFragment;
    "getCollateralTokenAmountForPricing(uint8)": FunctionFragment;
    "getCurrentBrokerVolume(uint8,address)": FunctionFragment;
    "getCurrentTraderVolume(uint8,address)": FunctionFragment;
    "getDepositAmountForLvgPosition(int128,int128,int128,int128,int128,int128,int128,int128)": FunctionFragment;
    "getFeeForBrokerDesignation(uint32)": FunctionFragment;
    "getFeeForBrokerStake(address)": FunctionFragment;
    "getFeeForBrokerVolume(uint8,address)": FunctionFragment;
    "getFeeForTraderStake(address)": FunctionFragment;
    "getFeeForTraderVolume(uint8,address)": FunctionFragment;
    "getLastPerpetualBaseToUSDConversion(uint24)": FunctionFragment;
    "getLiquidatableAccounts(uint24,int128[2])": FunctionFragment;
    "getLiquidityPool(uint8)": FunctionFragment;
    "getLiquidityPools(uint8,uint8)": FunctionFragment;
    "getMarginAccount(uint24,address)": FunctionFragment;
    "getMaxSignedOpenTradeSizeForPos(uint24,int128,bool)": FunctionFragment;
    "getNextLiquidatableTrader(uint24,int128[2])": FunctionFragment;
    "getOracleFactory()": FunctionFragment;
    "getOraclePrice(bytes4[2])": FunctionFragment;
    "getOracleUpdateTime(uint24)": FunctionFragment;
    "getOrderBookAddress(uint24)": FunctionFragment;
    "getOrderBookFactoryAddress()": FunctionFragment;
    "getPerpetual(uint24)": FunctionFragment;
    "getPerpetualCountInPool(uint8)": FunctionFragment;
    "getPerpetualId(uint8,uint8)": FunctionFragment;
    "getPerpetualStaticInfo(uint24[])": FunctionFragment;
    "getPerpetuals(uint24[])": FunctionFragment;
    "getPoolCount()": FunctionFragment;
    "getPoolIdByPerpetualId(uint24)": FunctionFragment;
    "getPoolStaticInfo(uint8,uint8)": FunctionFragment;
    "getPriceInfo(uint24)": FunctionFragment;
    "getSettleableAccounts(uint24,uint256,uint256)": FunctionFragment;
    "getShareTokenFactory()": FunctionFragment;
    "getShareTokenPriceD18(uint8)": FunctionFragment;
    "getTargetCollateralM1(int128,int128,(int128,int128,int128,int128,int128),int128)": FunctionFragment;
    "getTargetCollateralM2(int128,int128,(int128,int128,int128,int128,int128),int128)": FunctionFragment;
    "getTargetCollateralM3(int128,int128,(int128,int128,int128,int128,int128),int128)": FunctionFragment;
    "getTokenAmountToReturn(uint8,uint256)": FunctionFragment;
    "getTraderState(uint24,address,int128[2])": FunctionFragment;
    "getTreasuryAddress()": FunctionFragment;
    "getWithdrawRequests(uint8,uint256,uint256)": FunctionFragment;
    "increasePoolCash(uint8,int128)": FunctionFragment;
    "isActiveAccount(uint24,address)": FunctionFragment;
    "isDelegate(address,address)": FunctionFragment;
    "isMarketClosed(bytes4,bytes4)": FunctionFragment;
    "isOrderCanceled(bytes32)": FunctionFragment;
    "isOrderExecuted(bytes32)": FunctionFragment;
    "isPerpMarketClosed(uint24)": FunctionFragment;
    "liquidateByAMM(uint24,address,address,bytes[],uint64[])": FunctionFragment;
    "pauseLiquidityProvision(uint8,bool)": FunctionFragment;
    "preTrade((uint16,uint16,uint24,address,uint32,address,uint32,uint32,uint32,address,int128,int128,int128,bytes))": FunctionFragment;
    "queryExchangeFee(uint8,address,address)": FunctionFragment;
    "queryMidPrices(uint24[],int128[])": FunctionFragment;
    "queryPerpetualPrice(uint24,int128,int128[2])": FunctionFragment;
    "rebalance(uint24)": FunctionFragment;
    "reduceMarginCollateral(uint24,address,int128)": FunctionFragment;
    "removeDelegate()": FunctionFragment;
    "runLiquidityPool(uint8)": FunctionFragment;
    "setAMMPerpLogic(address)": FunctionFragment;
    "setBlockDelay(uint8)": FunctionFragment;
    "setBrokerTiers(uint256[],uint16[])": FunctionFragment;
    "setBrokerVolumeTiers(uint256[],uint16[])": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setEmergencyState(uint24)": FunctionFragment;
    "setFeesForDesignation(uint32[],uint16[])": FunctionFragment;
    "setInitialVolumeForFee(uint8,address,uint16)": FunctionFragment;
    "setNormalState(uint24)": FunctionFragment;
    "setOracleFactory(address)": FunctionFragment;
    "setOracleFactoryForPerpetual(uint24,address)": FunctionFragment;
    "setOrderBookFactory(address)": FunctionFragment;
    "setPerpetualBaseParams(uint24,int128[7])": FunctionFragment;
    "setPerpetualOracles(uint24,bytes4[2],bytes4[2])": FunctionFragment;
    "setPerpetualParam(uint24,string,int128)": FunctionFragment;
    "setPerpetualParamPair(uint24,string,int128,int128)": FunctionFragment;
    "setPerpetualPoolFactory(address)": FunctionFragment;
    "setPerpetualRiskParams(uint24,int128[5],int128[12])": FunctionFragment;
    "setPoolParam(uint8,string,int128)": FunctionFragment;
    "setTraderTiers(uint256[],uint16[])": FunctionFragment;
    "setTraderVolumeTiers(uint256[],uint16[])": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUtilityTokenAddr(address)": FunctionFragment;
    "settle(uint24,address)": FunctionFragment;
    "settleNextTraderInPool(uint8)": FunctionFragment;
    "splitProtocolFee(uint16)": FunctionFragment;
    "togglePerpEmergencyState(uint24)": FunctionFragment;
    "tradeViaOrderBook((uint16,uint16,uint24,address,uint32,address,uint32,uint32,uint32,address,int128,int128,int128,bytes))": FunctionFragment;
    "transferBrokerLots(uint8,address,uint32)": FunctionFragment;
    "transferBrokerOwnership(uint8,address)": FunctionFragment;
    "transferEarningsToTreasury(uint8,int128)": FunctionFragment;
    "transferValueToTreasury()": FunctionFragment;
    "updateAMMTargetFundSize(uint24)": FunctionFragment;
    "updateDefaultFundTargetSize(uint24)": FunctionFragment;
    "updateDefaultFundTargetSizeRandom(uint8)": FunctionFragment;
    "updateFundingAndPricesAfter(uint24)": FunctionFragment;
    "updateFundingAndPricesBefore(uint24,bool)": FunctionFragment;
    "updatePriceFeeds(uint24,bytes[],uint64[],uint256)": FunctionFragment;
    "updateVolumeEMAOnNewTrade(uint24,address,address,int128)": FunctionFragment;
    "validateStopPrice(bool,int128,int128)": FunctionFragment;
    "withdraw(uint24,address,int128,bytes[],uint64[])": FunctionFragment;
    "withdrawAll(uint24,address,bytes[],uint64[])": FunctionFragment;
    "withdrawDepositFromMarginAccount(uint24,address)": FunctionFragment;
    "withdrawFromDefaultFund(uint8,int128)": FunctionFragment;
    "withdrawLiquidity(uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activatePerpetual"
      | "addLiquidity"
      | "adjustSettlementPrice"
      | "calculateDefaultFundSize"
      | "calculatePerpetualPrice"
      | "calculateRiskNeutralPD"
      | "countActivePerpAccounts"
      | "createLiquidityPool"
      | "createPerpetual"
      | "deactivatePerp"
      | "decreasePoolCash"
      | "deposit"
      | "depositBrokerLots"
      | "depositMarginForOpeningTrade"
      | "depositToDefaultFund"
      | "determineExchangeFee"
      | "distributeFees"
      | "distributeFeesLiquidation"
      | "executeCancelOrder"
      | "executeLiquidityWithdrawal"
      | "executeTrade"
      | "getAMMPerpLogic"
      | "getAMMState"
      | "getActivePerpAccounts"
      | "getActivePerpAccountsByChunks"
      | "getBrokerDesignation"
      | "getBrokerInducedFee"
      | "getCollateralTokenAmountForPricing"
      | "getCurrentBrokerVolume"
      | "getCurrentTraderVolume"
      | "getDepositAmountForLvgPosition"
      | "getFeeForBrokerDesignation"
      | "getFeeForBrokerStake"
      | "getFeeForBrokerVolume"
      | "getFeeForTraderStake"
      | "getFeeForTraderVolume"
      | "getLastPerpetualBaseToUSDConversion"
      | "getLiquidatableAccounts"
      | "getLiquidityPool"
      | "getLiquidityPools"
      | "getMarginAccount"
      | "getMaxSignedOpenTradeSizeForPos"
      | "getNextLiquidatableTrader"
      | "getOracleFactory"
      | "getOraclePrice"
      | "getOracleUpdateTime"
      | "getOrderBookAddress"
      | "getOrderBookFactoryAddress"
      | "getPerpetual"
      | "getPerpetualCountInPool"
      | "getPerpetualId"
      | "getPerpetualStaticInfo"
      | "getPerpetuals"
      | "getPoolCount"
      | "getPoolIdByPerpetualId"
      | "getPoolStaticInfo"
      | "getPriceInfo"
      | "getSettleableAccounts"
      | "getShareTokenFactory"
      | "getShareTokenPriceD18"
      | "getTargetCollateralM1"
      | "getTargetCollateralM2"
      | "getTargetCollateralM3"
      | "getTokenAmountToReturn"
      | "getTraderState"
      | "getTreasuryAddress"
      | "getWithdrawRequests"
      | "increasePoolCash"
      | "isActiveAccount"
      | "isDelegate"
      | "isMarketClosed"
      | "isOrderCanceled"
      | "isOrderExecuted"
      | "isPerpMarketClosed"
      | "liquidateByAMM"
      | "pauseLiquidityProvision"
      | "preTrade"
      | "queryExchangeFee"
      | "queryMidPrices"
      | "queryPerpetualPrice"
      | "rebalance"
      | "reduceMarginCollateral"
      | "removeDelegate"
      | "runLiquidityPool"
      | "setAMMPerpLogic"
      | "setBlockDelay"
      | "setBrokerTiers"
      | "setBrokerVolumeTiers"
      | "setDelegate"
      | "setEmergencyState"
      | "setFeesForDesignation"
      | "setInitialVolumeForFee"
      | "setNormalState"
      | "setOracleFactory"
      | "setOracleFactoryForPerpetual"
      | "setOrderBookFactory"
      | "setPerpetualBaseParams"
      | "setPerpetualOracles"
      | "setPerpetualParam"
      | "setPerpetualParamPair"
      | "setPerpetualPoolFactory"
      | "setPerpetualRiskParams"
      | "setPoolParam"
      | "setTraderTiers"
      | "setTraderVolumeTiers"
      | "setTreasury"
      | "setUtilityTokenAddr"
      | "settle"
      | "settleNextTraderInPool"
      | "splitProtocolFee"
      | "togglePerpEmergencyState"
      | "tradeViaOrderBook"
      | "transferBrokerLots"
      | "transferBrokerOwnership"
      | "transferEarningsToTreasury"
      | "transferValueToTreasury"
      | "updateAMMTargetFundSize"
      | "updateDefaultFundTargetSize"
      | "updateDefaultFundTargetSizeRandom"
      | "updateFundingAndPricesAfter"
      | "updateFundingAndPricesBefore"
      | "updatePriceFeeds"
      | "updateVolumeEMAOnNewTrade"
      | "validateStopPrice"
      | "withdraw"
      | "withdrawAll"
      | "withdrawDepositFromMarginAccount"
      | "withdrawFromDefaultFund"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activatePerpetual",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustSettlementPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDefaultFundSize",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePerpetualPrice",
    values: [
      AMMPerpLogic.AMMVariablesStruct,
      AMMPerpLogic.MarketVariablesStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRiskNeutralPD",
    values: [
      AMMPerpLogic.AMMVariablesStruct,
      AMMPerpLogic.MarketVariablesStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "countActivePerpAccounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidityPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPerpetual",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      PromiseOrValue<BigNumberish>[],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePerp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePoolCash",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBrokerLots",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMarginForOpeningTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IPerpetualOrder.OrderStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToDefaultFund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "determineExchangeFee",
    values: [IPerpetualOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [
      IPerpetualOrder.OrderStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFeesLiquidation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCancelOrder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLiquidityWithdrawal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAMMPerpLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAMMState",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePerpAccounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePerpAccountsByChunks",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBrokerDesignation",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBrokerInducedFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralTokenAmountForPricing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBrokerVolume",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTraderVolume",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmountForLvgPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeForBrokerDesignation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeForBrokerStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeForBrokerVolume",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeForTraderStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeForTraderVolume",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastPerpetualBaseToUSDConversion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidatableAccounts",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPools",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSignedOpenTradeSizeForPos",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextLiquidatableTrader",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values: [[PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleUpdateTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetual",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetualCountInPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetualId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetualStaticInfo",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetuals",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolIdByPerpetualId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolStaticInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettleableAccounts",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getShareTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShareTokenPriceD18",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCollateralM1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      AMMPerpLogic.MarketVariablesStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCollateralM2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      AMMPerpLogic.MarketVariablesStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCollateralM3",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      AMMPerpLogic.MarketVariablesStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountToReturn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawRequests",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolCash",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketClosed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrderCanceled",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrderExecuted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPerpMarketClosed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByAMM",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseLiquidityProvision",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "preTrade",
    values: [IPerpetualOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExchangeFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryMidPrices",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "queryPerpetualPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceMarginCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runLiquidityPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAMMPerpLogic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBrokerTiers",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBrokerVolumeTiers",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesForDesignation",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialVolumeForFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNormalState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleFactoryForPerpetual",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderBookFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualBaseParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualOracles",
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualParam",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualParamPair",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualPoolFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualRiskParams",
    values: [
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolParam",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderTiers",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderVolumeTiers",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilityTokenAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleNextTraderInPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePerpEmergencyState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeViaOrderBook",
    values: [IPerpetualOrder.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBrokerLots",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBrokerOwnership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferEarningsToTreasury",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferValueToTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAMMTargetFundSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultFundTargetSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultFundTargetSizeRandom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingAndPricesAfter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingAndPricesBefore",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeeds",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVolumeEMAOnNewTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateStopPrice",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositFromMarginAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromDefaultFund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDefaultFundSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePerpetualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRiskNeutralPD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countActivePerpAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePerp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePoolCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBrokerLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMarginForOpeningTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToDefaultFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineExchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFeesLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLiquidityWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAMMPerpLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAMMState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePerpAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePerpAccountsByChunks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBrokerDesignation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBrokerInducedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralTokenAmountForPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBrokerVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTraderVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmountForLvgPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeForBrokerDesignation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeForBrokerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeForBrokerVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeForTraderStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeForTraderVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastPerpetualBaseToUSDConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidatableAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSignedOpenTradeSizeForPos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextLiquidatableTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetualCountInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetualId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetualStaticInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetuals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolIdByPerpetualId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolStaticInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettleableAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShareTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShareTokenPriceD18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCollateralM1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCollateralM2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCollateralM3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountToReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolCash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMarketClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrderCanceled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrderExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPerpMarketClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseLiquidityProvision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryExchangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryMidPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryPerpetualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceMarginCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAMMPerpLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBrokerTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBrokerVolumeTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesForDesignation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialVolumeForFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNormalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleFactoryForPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderBookFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualBaseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualParamPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualRiskParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderVolumeTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleNextTraderInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePerpEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeViaOrderBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBrokerLots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBrokerOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferEarningsToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferValueToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAMMTargetFundSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultFundTargetSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultFundTargetSizeRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingAndPricesAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingAndPricesBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVolumeEMAOnNewTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateStopPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositFromMarginAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromDefaultFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "BrokerLotsTransferred(uint8,address,address,uint32)": EventFragment;
    "BrokerVolumeTransferred(uint8,address,address,int128)": EventFragment;
    "Clear(uint24,address)": EventFragment;
    "DistributeFees(uint8,uint24,address,int128,int128)": EventFragment;
    "Liquidate(uint24,address,address,int128,int128,int128,int128,int128)": EventFragment;
    "LiquidityAdded(uint8,address,uint256,uint256)": EventFragment;
    "LiquidityPoolCreated(uint8,address,address,uint16,int128)": EventFragment;
    "LiquidityProvisionPaused(bool,uint8)": EventFragment;
    "LiquidityRemoved(uint8,address,uint256,uint256)": EventFragment;
    "LiquidityWithdrawalInitiated(uint8,address,uint256)": EventFragment;
    "PerpetualCreated(uint8,uint24,int128[7],int128[5],int128[12],uint256)": EventFragment;
    "PerpetualLimitOrderCancelled(uint24,bytes32)": EventFragment;
    "RunLiquidityPool(uint8)": EventFragment;
    "SetBlockDelay(uint8)": EventFragment;
    "SetBrokerDesignations(uint32[],uint16[])": EventFragment;
    "SetBrokerTiers(uint256[],uint16[])": EventFragment;
    "SetBrokerVolumeTiers(uint256[],uint16[])": EventFragment;
    "SetClearedState(uint24)": EventFragment;
    "SetDelegate(address,address)": EventFragment;
    "SetEmergencyState(uint24,int128,int128,int128)": EventFragment;
    "SetNormalState(uint24)": EventFragment;
    "SetOracles(uint24,bytes4[2],bytes4[2])": EventFragment;
    "SetParameter(uint24,string,int128)": EventFragment;
    "SetParameterPair(uint24,string,int128,int128)": EventFragment;
    "SetPerpetualBaseParameters(uint24,int128[7])": EventFragment;
    "SetPerpetualRiskParameters(uint24,int128[5],int128[12])": EventFragment;
    "SetPoolParameter(uint8,string,int128)": EventFragment;
    "SetTraderTiers(uint256[],uint16[])": EventFragment;
    "SetTraderVolumeTiers(uint256[],uint16[])": EventFragment;
    "SetUtilityToken(address)": EventFragment;
    "Settle(uint24,address,int256)": EventFragment;
    "SettleState(uint24)": EventFragment;
    "SettlementComplete(uint24)": EventFragment;
    "TokensDeposited(uint24,address,int128)": EventFragment;
    "TokensWithdrawn(uint24,address,int128)": EventFragment;
    "Trade(uint24,address,tuple,bytes32,int128,int128,int128,int128,int128)": EventFragment;
    "TransferAddressTo(string,address,address)": EventFragment;
    "UpdateBrokerAddedCash(uint8,uint32,uint32)": EventFragment;
    "UpdateFundingRate(uint24,int128)": EventFragment;
    "UpdateMarginAccount(uint24,address,int128)": EventFragment;
    "UpdateMarkPrice(uint24,int128,int128,int128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BrokerLotsTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokerVolumeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityProvisionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityWithdrawalInitiated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerpetualCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PerpetualLimitOrderCancelled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RunLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlockDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBrokerDesignations"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBrokerTiers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBrokerVolumeTiers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClearedState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergencyState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNormalState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracles"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetParameterPair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPerpetualBaseParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPerpetualRiskParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTraderTiers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTraderVolumeTiers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUtilityToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferAddressTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBrokerAddedCash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFundingRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarginAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarkPrice"): EventFragment;
}

export interface BrokerLotsTransferredEventObject {
  poolId: number;
  oldOwner: string;
  newOwner: string;
  numLots: number;
}
export type BrokerLotsTransferredEvent = TypedEvent<
  [number, string, string, number],
  BrokerLotsTransferredEventObject
>;

export type BrokerLotsTransferredEventFilter =
  TypedEventFilter<BrokerLotsTransferredEvent>;

export interface BrokerVolumeTransferredEventObject {
  poolId: number;
  oldOwner: string;
  newOwner: string;
  fVolume: BigNumber;
}
export type BrokerVolumeTransferredEvent = TypedEvent<
  [number, string, string, BigNumber],
  BrokerVolumeTransferredEventObject
>;

export type BrokerVolumeTransferredEventFilter =
  TypedEventFilter<BrokerVolumeTransferredEvent>;

export interface ClearEventObject {
  perpetualId: number;
  trader: string;
}
export type ClearEvent = TypedEvent<[number, string], ClearEventObject>;

export type ClearEventFilter = TypedEventFilter<ClearEvent>;

export interface DistributeFeesEventObject {
  poolId: number;
  perpetualId: number;
  trader: string;
  protocolFeeCC: BigNumber;
  participationFundFeeCC: BigNumber;
}
export type DistributeFeesEvent = TypedEvent<
  [number, number, string, BigNumber, BigNumber],
  DistributeFeesEventObject
>;

export type DistributeFeesEventFilter = TypedEventFilter<DistributeFeesEvent>;

export interface LiquidateEventObject {
  perpetualId: number;
  liquidator: string;
  trader: string;
  amountLiquidatedBC: BigNumber;
  liquidationPrice: BigNumber;
  newPositionSizeBC: BigNumber;
  fFeeCC: BigNumber;
  fPnlCC: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface LiquidityAddedEventObject {
  poolId: number;
  user: string;
  tokenAmount: BigNumber;
  shareAmount: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityPoolCreatedEventObject {
  id: number;
  marginTokenAddress: string;
  shareTokenAddress: string;
  iTargetPoolSizeUpdateTime: number;
  fBrokerCollateralLotSize: BigNumber;
}
export type LiquidityPoolCreatedEvent = TypedEvent<
  [number, string, string, number, BigNumber],
  LiquidityPoolCreatedEventObject
>;

export type LiquidityPoolCreatedEventFilter =
  TypedEventFilter<LiquidityPoolCreatedEvent>;

export interface LiquidityProvisionPausedEventObject {
  pauseOn: boolean;
  poolId: number;
}
export type LiquidityProvisionPausedEvent = TypedEvent<
  [boolean, number],
  LiquidityProvisionPausedEventObject
>;

export type LiquidityProvisionPausedEventFilter =
  TypedEventFilter<LiquidityProvisionPausedEvent>;

export interface LiquidityRemovedEventObject {
  poolId: number;
  user: string;
  tokenAmount: BigNumber;
  shareAmount: BigNumber;
}
export type LiquidityRemovedEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  LiquidityRemovedEventObject
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export interface LiquidityWithdrawalInitiatedEventObject {
  poolId: number;
  user: string;
  shareAmount: BigNumber;
}
export type LiquidityWithdrawalInitiatedEvent = TypedEvent<
  [number, string, BigNumber],
  LiquidityWithdrawalInitiatedEventObject
>;

export type LiquidityWithdrawalInitiatedEventFilter =
  TypedEventFilter<LiquidityWithdrawalInitiatedEvent>;

export interface PerpetualCreatedEventObject {
  poolId: number;
  id: number;
  baseParams: BigNumber[];
  underlyingRiskParams: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  defaultFundRiskParams: BigNumber[];
  eCollateralCurrency: BigNumber;
}
export type PerpetualCreatedEvent = TypedEvent<
  [
    number,
    number,
    BigNumber[],
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber[],
    BigNumber
  ],
  PerpetualCreatedEventObject
>;

export type PerpetualCreatedEventFilter =
  TypedEventFilter<PerpetualCreatedEvent>;

export interface PerpetualLimitOrderCancelledEventObject {
  perpetualId: number;
  orderHash: string;
}
export type PerpetualLimitOrderCancelledEvent = TypedEvent<
  [number, string],
  PerpetualLimitOrderCancelledEventObject
>;

export type PerpetualLimitOrderCancelledEventFilter =
  TypedEventFilter<PerpetualLimitOrderCancelledEvent>;

export interface RunLiquidityPoolEventObject {
  _liqPoolID: number;
}
export type RunLiquidityPoolEvent = TypedEvent<
  [number],
  RunLiquidityPoolEventObject
>;

export type RunLiquidityPoolEventFilter =
  TypedEventFilter<RunLiquidityPoolEvent>;

export interface SetBlockDelayEventObject {
  delay: number;
}
export type SetBlockDelayEvent = TypedEvent<[number], SetBlockDelayEventObject>;

export type SetBlockDelayEventFilter = TypedEventFilter<SetBlockDelayEvent>;

export interface SetBrokerDesignationsEventObject {
  designations: number[];
  fees: number[];
}
export type SetBrokerDesignationsEvent = TypedEvent<
  [number[], number[]],
  SetBrokerDesignationsEventObject
>;

export type SetBrokerDesignationsEventFilter =
  TypedEventFilter<SetBrokerDesignationsEvent>;

export interface SetBrokerTiersEventObject {
  tiers: BigNumber[];
  feesTbps: number[];
}
export type SetBrokerTiersEvent = TypedEvent<
  [BigNumber[], number[]],
  SetBrokerTiersEventObject
>;

export type SetBrokerTiersEventFilter = TypedEventFilter<SetBrokerTiersEvent>;

export interface SetBrokerVolumeTiersEventObject {
  tiers: BigNumber[];
  feesTbps: number[];
}
export type SetBrokerVolumeTiersEvent = TypedEvent<
  [BigNumber[], number[]],
  SetBrokerVolumeTiersEventObject
>;

export type SetBrokerVolumeTiersEventFilter =
  TypedEventFilter<SetBrokerVolumeTiersEvent>;

export interface SetClearedStateEventObject {
  perpetualId: number;
}
export type SetClearedStateEvent = TypedEvent<
  [number],
  SetClearedStateEventObject
>;

export type SetClearedStateEventFilter = TypedEventFilter<SetClearedStateEvent>;

export interface SetDelegateEventObject {
  trader: string;
  delegate: string;
}
export type SetDelegateEvent = TypedEvent<
  [string, string],
  SetDelegateEventObject
>;

export type SetDelegateEventFilter = TypedEventFilter<SetDelegateEvent>;

export interface SetEmergencyStateEventObject {
  perpetualId: number;
  fSettlementMarkPremiumRate: BigNumber;
  fSettlementS2Price: BigNumber;
  fSettlementS3Price: BigNumber;
}
export type SetEmergencyStateEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber],
  SetEmergencyStateEventObject
>;

export type SetEmergencyStateEventFilter =
  TypedEventFilter<SetEmergencyStateEvent>;

export interface SetNormalStateEventObject {
  perpetualId: number;
}
export type SetNormalStateEvent = TypedEvent<
  [number],
  SetNormalStateEventObject
>;

export type SetNormalStateEventFilter = TypedEventFilter<SetNormalStateEvent>;

export interface SetOraclesEventObject {
  perpetualId: number;
  baseQuoteS2: [string, string];
  baseQuoteS3: [string, string];
}
export type SetOraclesEvent = TypedEvent<
  [number, [string, string], [string, string]],
  SetOraclesEventObject
>;

export type SetOraclesEventFilter = TypedEventFilter<SetOraclesEvent>;

export interface SetParameterEventObject {
  perpetualId: number;
  name: string;
  value: BigNumber;
}
export type SetParameterEvent = TypedEvent<
  [number, string, BigNumber],
  SetParameterEventObject
>;

export type SetParameterEventFilter = TypedEventFilter<SetParameterEvent>;

export interface SetParameterPairEventObject {
  perpetualId: number;
  name: string;
  value1: BigNumber;
  value2: BigNumber;
}
export type SetParameterPairEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  SetParameterPairEventObject
>;

export type SetParameterPairEventFilter =
  TypedEventFilter<SetParameterPairEvent>;

export interface SetPerpetualBaseParametersEventObject {
  perpetualId: number;
  baseParams: BigNumber[];
}
export type SetPerpetualBaseParametersEvent = TypedEvent<
  [number, BigNumber[]],
  SetPerpetualBaseParametersEventObject
>;

export type SetPerpetualBaseParametersEventFilter =
  TypedEventFilter<SetPerpetualBaseParametersEvent>;

export interface SetPerpetualRiskParametersEventObject {
  perpetualId: number;
  underlyingRiskParams: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  defaultFundRiskParams: BigNumber[];
}
export type SetPerpetualRiskParametersEvent = TypedEvent<
  [
    number,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber[]
  ],
  SetPerpetualRiskParametersEventObject
>;

export type SetPerpetualRiskParametersEventFilter =
  TypedEventFilter<SetPerpetualRiskParametersEvent>;

export interface SetPoolParameterEventObject {
  poolId: number;
  name: string;
  value: BigNumber;
}
export type SetPoolParameterEvent = TypedEvent<
  [number, string, BigNumber],
  SetPoolParameterEventObject
>;

export type SetPoolParameterEventFilter =
  TypedEventFilter<SetPoolParameterEvent>;

export interface SetTraderTiersEventObject {
  tiers: BigNumber[];
  feesTbps: number[];
}
export type SetTraderTiersEvent = TypedEvent<
  [BigNumber[], number[]],
  SetTraderTiersEventObject
>;

export type SetTraderTiersEventFilter = TypedEventFilter<SetTraderTiersEvent>;

export interface SetTraderVolumeTiersEventObject {
  tiers: BigNumber[];
  feesTbps: number[];
}
export type SetTraderVolumeTiersEvent = TypedEvent<
  [BigNumber[], number[]],
  SetTraderVolumeTiersEventObject
>;

export type SetTraderVolumeTiersEventFilter =
  TypedEventFilter<SetTraderVolumeTiersEvent>;

export interface SetUtilityTokenEventObject {
  tokenAddr: string;
}
export type SetUtilityTokenEvent = TypedEvent<
  [string],
  SetUtilityTokenEventObject
>;

export type SetUtilityTokenEventFilter = TypedEventFilter<SetUtilityTokenEvent>;

export interface SettleEventObject {
  perpetualId: number;
  trader: string;
  amount: BigNumber;
}
export type SettleEvent = TypedEvent<
  [number, string, BigNumber],
  SettleEventObject
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface SettleStateEventObject {
  perpetualId: number;
}
export type SettleStateEvent = TypedEvent<[number], SettleStateEventObject>;

export type SettleStateEventFilter = TypedEventFilter<SettleStateEvent>;

export interface SettlementCompleteEventObject {
  perpetualId: number;
}
export type SettlementCompleteEvent = TypedEvent<
  [number],
  SettlementCompleteEventObject
>;

export type SettlementCompleteEventFilter =
  TypedEventFilter<SettlementCompleteEvent>;

export interface TokensDepositedEventObject {
  perpetualId: number;
  trader: string;
  amount: BigNumber;
}
export type TokensDepositedEvent = TypedEvent<
  [number, string, BigNumber],
  TokensDepositedEventObject
>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export interface TokensWithdrawnEventObject {
  perpetualId: number;
  trader: string;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [number, string, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface TradeEventObject {
  perpetualId: number;
  trader: string;
  order: IPerpetualOrder.OrderStructOutput;
  orderDigest: string;
  newPositionSizeBC: BigNumber;
  price: BigNumber;
  fFeeCC: BigNumber;
  fPnlCC: BigNumber;
  fB2C: BigNumber;
}
export type TradeEvent = TypedEvent<
  [
    number,
    string,
    IPerpetualOrder.OrderStructOutput,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface TransferAddressToEventObject {
  name: string;
  oldOBFactory: string;
  newOBFactory: string;
}
export type TransferAddressToEvent = TypedEvent<
  [string, string, string],
  TransferAddressToEventObject
>;

export type TransferAddressToEventFilter =
  TypedEventFilter<TransferAddressToEvent>;

export interface UpdateBrokerAddedCashEventObject {
  poolId: number;
  iLots: number;
  iNewBrokerLots: number;
}
export type UpdateBrokerAddedCashEvent = TypedEvent<
  [number, number, number],
  UpdateBrokerAddedCashEventObject
>;

export type UpdateBrokerAddedCashEventFilter =
  TypedEventFilter<UpdateBrokerAddedCashEvent>;

export interface UpdateFundingRateEventObject {
  perpetualId: number;
  fFundingRate: BigNumber;
}
export type UpdateFundingRateEvent = TypedEvent<
  [number, BigNumber],
  UpdateFundingRateEventObject
>;

export type UpdateFundingRateEventFilter =
  TypedEventFilter<UpdateFundingRateEvent>;

export interface UpdateMarginAccountEventObject {
  perpetualId: number;
  trader: string;
  fFundingPaymentCC: BigNumber;
}
export type UpdateMarginAccountEvent = TypedEvent<
  [number, string, BigNumber],
  UpdateMarginAccountEventObject
>;

export type UpdateMarginAccountEventFilter =
  TypedEventFilter<UpdateMarginAccountEvent>;

export interface UpdateMarkPriceEventObject {
  perpetualId: number;
  fMidPricePremium: BigNumber;
  fMarkPricePremium: BigNumber;
  fSpotIndexPrice: BigNumber;
}
export type UpdateMarkPriceEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber],
  UpdateMarkPriceEventObject
>;

export type UpdateMarkPriceEventFilter = TypedEventFilter<UpdateMarkPriceEvent>;

export interface IPerpetualManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPerpetualManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activatePerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adjustSettlementPrice(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fSettlementS2: PromiseOrValue<BigNumberish>,
      _fSettlementS3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateDefaultFundSize(
      _fK2AMM: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _fk2Trader: PromiseOrValue<BigNumberish>,
      _fCoverN: PromiseOrValue<BigNumberish>,
      fStressRet2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fStressRet3: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fIndexPrices: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _eCCY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePerpetualPrice(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fBidAskSpread: PromiseOrValue<BigNumberish>,
      _fIncentiveSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRiskNeutralPD(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _withCDF: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    countActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createLiquidityPool(
      _marginTokenAddress: PromiseOrValue<string>,
      _iTargetPoolSizeUpdateTime: PromiseOrValue<BigNumberish>,
      _fBrokerCollateralLotSize: PromiseOrValue<BigNumberish>,
      _fCeilPnLShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPerpetual(
      _iPoolId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseParams: PromiseOrValue<BigNumberish>[],
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      _eCollateralCurrency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivatePerp(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _iLots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositMarginForOpeningTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fDepositRequired: PromiseOrValue<BigNumberish>,
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    determineExchangeFee(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    distributeFees(
      _order: IPerpetualOrder.OrderStruct,
      _brkrFeeTbps: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      _hasOpened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeFeesLiquidation(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fDeltaPositionBC: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeCancelOrder(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _digest: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeLiquidityWithdrawal(
      _poolId: PromiseOrValue<BigNumberish>,
      _lpAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fTraderPos: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _isClose: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAMMPerpLogic(overrides?: CallOverrides): Promise<[string]>;

    getAMMState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getActivePerpAccountsByChunks(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBrokerDesignation(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getBrokerInducedFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCollateralTokenAmountForPricing(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositAmountForLvgPosition(
      _fPosition0: PromiseOrValue<BigNumberish>,
      _fBalance0: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fTargetLeverage: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _fS2Mark: PromiseOrValue<BigNumberish>,
      _fS3: PromiseOrValue<BigNumberish>,
      _fS2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeForBrokerDesignation(
      _brokerDesignation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFeeForBrokerStake(
      brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFeeForBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFeeForTraderStake(
      traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFeeForTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getLastPerpetualBaseToUSDConversion(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidatableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[string[]] & { unsafeAccounts: string[] }>;

    getLiquidityPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PerpStorage.LiquidityPoolDataStructOutput]>;

    getLiquidityPools(
      _poolIdFrom: PromiseOrValue<BigNumberish>,
      _poolIdTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PerpStorage.LiquidityPoolDataStructOutput[]]>;

    getMarginAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PerpStorage.MarginAccountStructOutput]>;

    getMaxSignedOpenTradeSizeForPos(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fCurrentTraderPos: PromiseOrValue<BigNumberish>,
      _isBuy: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextLiquidatableTrader(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[string] & { traderAddr: string }>;

    getOracleFactory(overrides?: CallOverrides): Promise<[string]>;

    getOraclePrice(
      _baseQuote: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fPrice: BigNumber }>;

    getOracleUpdateTime(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrderBookAddress(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOrderBookFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getPerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PerpStorage.PerpetualDataStructOutput]>;

    getPerpetualCountInPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPerpetualId(
      _poolId: PromiseOrValue<BigNumberish>,
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPerpetualStaticInfo(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IPerpetualInfo.PerpetualStaticInfoStructOutput[]]>;

    getPerpetuals(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[PerpStorage.PerpetualDataStructOutput[]]>;

    getPoolCount(overrides?: CallOverrides): Promise<[number]>;

    getPoolIdByPerpetualId(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPoolStaticInfo(
      _poolFromIdx: PromiseOrValue<BigNumberish>,
      _poolToIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[][], string[], string[], string] & {
        _oracleFactoryAddress: string;
      }
    >;

    getPriceInfo(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], boolean[]]>;

    getSettleableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getShareTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    getShareTokenPriceD18(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getTargetCollateralM1(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTargetCollateralM2(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTargetCollateralM3(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAmountToReturn(
      _poolId: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTraderState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawRequests(
      poolId: PromiseOrValue<BigNumberish>,
      _fromIdx: PromiseOrValue<BigNumberish>,
      numRequests: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPerpetualTreasury.WithdrawRequestStructOutput[]]>;

    increasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isActiveAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDelegate(
      _trader: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketClosed(
      _baseCurrency: PromiseOrValue<BytesLike>,
      _quoteCurrency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOrderCanceled(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOrderExecuted(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPerpMarketClosed(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isClosed: boolean }>;

    liquidateByAMM(
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      _liquidatorAddr: PromiseOrValue<string>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseLiquidityProvision(
      _poolId: PromiseOrValue<BigNumberish>,
      _pauseOn: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    preTrade(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryExchangeFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    queryMidPrices(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      idxPriceDataPairs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    queryPerpetualPrice(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fTradeAmountBC: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalance(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reduceMarginCollateral(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeDelegate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    runLiquidityPool(
      _liqPoolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAMMPerpLogic(
      _AMMPerpLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlockDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBrokerTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBrokerVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesForDesignation(
      _designations: PromiseOrValue<BigNumberish>[],
      _fees: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitialVolumeForFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      _feeTbps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNormalState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleFactory(
      _oracleFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleFactoryForPerpetual(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _oracleAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOrderBookFactory(
      _orderBookFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerpetualBaseParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseParams: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerpetualOracles(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerpetualParam(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _varName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerpetualParamPair(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value1: PromiseOrValue<BigNumberish>,
      _value2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerpetualPoolFactory(
      _shareTokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerpetualRiskParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTraderTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTraderVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilityTokenAddr(
      tokenAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      _perpetualID: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleNextTraderInPool(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    splitProtocolFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    togglePerpEmergencyState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeViaOrderBook(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      _lots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferBrokerOwnership(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferEarningsToTreasury(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferValueToTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAMMTargetFundSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDefaultFundTargetSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDefaultFundTargetSizeRandom(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFundingAndPricesAfter(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFundingAndPricesBefore(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _revertIfClosed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeeds(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      _maxAcceptableFeedAge: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVolumeEMAOnNewTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      _tradeAmountBC: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateStopPrice(
      _isLong: PromiseOrValue<boolean>,
      _fMarkPrice: PromiseOrValue<BigNumberish>,
      _fTriggerPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdraw(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawDepositFromMarginAccount(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activatePerpetual(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    _iPoolIndex: PromiseOrValue<BigNumberish>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adjustSettlementPrice(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _fSettlementS2: PromiseOrValue<BigNumberish>,
    _fSettlementS3: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateDefaultFundSize(
    _fK2AMM: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _fk2Trader: PromiseOrValue<BigNumberish>,
    _fCoverN: PromiseOrValue<BigNumberish>,
    fStressRet2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    fStressRet3: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    fIndexPrices: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _eCCY: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePerpetualPrice(
    _ammVars: AMMPerpLogic.AMMVariablesStruct,
    _mktVars: AMMPerpLogic.MarketVariablesStruct,
    _fTradeAmount: PromiseOrValue<BigNumberish>,
    _fBidAskSpread: PromiseOrValue<BigNumberish>,
    _fIncentiveSpread: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRiskNeutralPD(
    _ammVars: AMMPerpLogic.AMMVariablesStruct,
    _mktVars: AMMPerpLogic.MarketVariablesStruct,
    _fTradeAmount: PromiseOrValue<BigNumberish>,
    _withCDF: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  countActivePerpAccounts(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createLiquidityPool(
    _marginTokenAddress: PromiseOrValue<string>,
    _iTargetPoolSizeUpdateTime: PromiseOrValue<BigNumberish>,
    _fBrokerCollateralLotSize: PromiseOrValue<BigNumberish>,
    _fCeilPnLShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPerpetual(
    _iPoolId: PromiseOrValue<BigNumberish>,
    _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    _baseParams: PromiseOrValue<BigNumberish>[],
    _underlyingRiskParams: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
    _eCollateralCurrency: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivatePerp(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreasePoolCash(
    _iPoolIdx: PromiseOrValue<BigNumberish>,
    _fAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _fAmount: PromiseOrValue<BigNumberish>,
    _updateData: PromiseOrValue<BytesLike>[],
    _publishTimes: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositBrokerLots(
    _poolId: PromiseOrValue<BigNumberish>,
    _iLots: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositMarginForOpeningTrade(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _fDepositRequired: PromiseOrValue<BigNumberish>,
    _order: IPerpetualOrder.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToDefaultFund(
    _poolId: PromiseOrValue<BigNumberish>,
    _fAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  determineExchangeFee(
    _order: IPerpetualOrder.OrderStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  distributeFees(
    _order: IPerpetualOrder.OrderStruct,
    _brkrFeeTbps: PromiseOrValue<BigNumberish>,
    _protocolFeeTbps: PromiseOrValue<BigNumberish>,
    _hasOpened: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeFeesLiquidation(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _fDeltaPositionBC: PromiseOrValue<BigNumberish>,
    _protocolFeeTbps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeCancelOrder(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _digest: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeLiquidityWithdrawal(
    _poolId: PromiseOrValue<BigNumberish>,
    _lpAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTrade(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _fTraderPos: PromiseOrValue<BigNumberish>,
    _fTradeAmount: PromiseOrValue<BigNumberish>,
    _fPrice: PromiseOrValue<BigNumberish>,
    _isClose: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAMMPerpLogic(overrides?: CallOverrides): Promise<string>;

  getAMMState(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _fIndexPrice: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getActivePerpAccounts(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getActivePerpAccountsByChunks(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBrokerDesignation(
    _poolId: PromiseOrValue<BigNumberish>,
    _brokerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getBrokerInducedFee(
    _poolId: PromiseOrValue<BigNumberish>,
    _brokerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getCollateralTokenAmountForPricing(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentBrokerVolume(
    _poolId: PromiseOrValue<BigNumberish>,
    _brokerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentTraderVolume(
    _poolId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositAmountForLvgPosition(
    _fPosition0: PromiseOrValue<BigNumberish>,
    _fBalance0: PromiseOrValue<BigNumberish>,
    _fTradeAmount: PromiseOrValue<BigNumberish>,
    _fTargetLeverage: PromiseOrValue<BigNumberish>,
    _fPrice: PromiseOrValue<BigNumberish>,
    _fS2Mark: PromiseOrValue<BigNumberish>,
    _fS3: PromiseOrValue<BigNumberish>,
    _fS2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeForBrokerDesignation(
    _brokerDesignation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getFeeForBrokerStake(
    brokerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getFeeForBrokerVolume(
    _poolId: PromiseOrValue<BigNumberish>,
    _brokerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getFeeForTraderStake(
    traderAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getFeeForTraderVolume(
    _poolId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getLastPerpetualBaseToUSDConversion(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidatableAccounts(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _fIndexPrice: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getLiquidityPool(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PerpStorage.LiquidityPoolDataStructOutput>;

  getLiquidityPools(
    _poolIdFrom: PromiseOrValue<BigNumberish>,
    _poolIdTo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PerpStorage.LiquidityPoolDataStructOutput[]>;

  getMarginAccount(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _traderAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PerpStorage.MarginAccountStructOutput>;

  getMaxSignedOpenTradeSizeForPos(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _fCurrentTraderPos: PromiseOrValue<BigNumberish>,
    _isBuy: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextLiquidatableTrader(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _fIndexPrice: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<string>;

  getOracleFactory(overrides?: CallOverrides): Promise<string>;

  getOraclePrice(
    _baseQuote: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleUpdateTime(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOrderBookAddress(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOrderBookFactoryAddress(overrides?: CallOverrides): Promise<string>;

  getPerpetual(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PerpStorage.PerpetualDataStructOutput>;

  getPerpetualCountInPool(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPerpetualId(
    _poolId: PromiseOrValue<BigNumberish>,
    _perpetualIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPerpetualStaticInfo(
    perpetualIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IPerpetualInfo.PerpetualStaticInfoStructOutput[]>;

  getPerpetuals(
    perpetualIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<PerpStorage.PerpetualDataStructOutput[]>;

  getPoolCount(overrides?: CallOverrides): Promise<number>;

  getPoolIdByPerpetualId(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPoolStaticInfo(
    _poolFromIdx: PromiseOrValue<BigNumberish>,
    _poolToIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number[][], string[], string[], string] & { _oracleFactoryAddress: string }
  >;

  getPriceInfo(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], boolean[]]>;

  getSettleableAccounts(
    _perpetualId: PromiseOrValue<BigNumberish>,
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getShareTokenFactory(overrides?: CallOverrides): Promise<string>;

  getShareTokenPriceD18(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTargetCollateralM1(
    _fK2: PromiseOrValue<BigNumberish>,
    _fL1: PromiseOrValue<BigNumberish>,
    _mktVars: AMMPerpLogic.MarketVariablesStruct,
    _fTargetDD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTargetCollateralM2(
    _fK2: PromiseOrValue<BigNumberish>,
    _fL1: PromiseOrValue<BigNumberish>,
    _mktVars: AMMPerpLogic.MarketVariablesStruct,
    _fTargetDD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTargetCollateralM3(
    _fK2: PromiseOrValue<BigNumberish>,
    _fL1: PromiseOrValue<BigNumberish>,
    _mktVars: AMMPerpLogic.MarketVariablesStruct,
    _fTargetDD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAmountToReturn(
    _poolId: PromiseOrValue<BigNumberish>,
    _shareAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTraderState(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _traderAddress: PromiseOrValue<string>,
    _fIndexPrice: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

  getWithdrawRequests(
    poolId: PromiseOrValue<BigNumberish>,
    _fromIdx: PromiseOrValue<BigNumberish>,
    numRequests: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPerpetualTreasury.WithdrawRequestStructOutput[]>;

  increasePoolCash(
    _iPoolIdx: PromiseOrValue<BigNumberish>,
    _fAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isActiveAccount(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _traderAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDelegate(
    _trader: PromiseOrValue<string>,
    _delegate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketClosed(
    _baseCurrency: PromiseOrValue<BytesLike>,
    _quoteCurrency: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOrderCanceled(
    digest: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOrderExecuted(
    digest: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPerpMarketClosed(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateByAMM(
    _perpetualIndex: PromiseOrValue<BigNumberish>,
    _liquidatorAddr: PromiseOrValue<string>,
    _traderAddr: PromiseOrValue<string>,
    _updateData: PromiseOrValue<BytesLike>[],
    _publishTimes: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseLiquidityProvision(
    _poolId: PromiseOrValue<BigNumberish>,
    _pauseOn: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  preTrade(
    _order: IPerpetualOrder.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryExchangeFee(
    _poolId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _brokerAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  queryMidPrices(
    perpetualIds: PromiseOrValue<BigNumberish>[],
    idxPriceDataPairs: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  queryPerpetualPrice(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _fTradeAmountBC: PromiseOrValue<BigNumberish>,
    _fIndexPrice: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalance(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reduceMarginCollateral(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _fAmountToWithdraw: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeDelegate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  runLiquidityPool(
    _liqPoolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAMMPerpLogic(
    _AMMPerpLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlockDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBrokerTiers(
    _tiers: PromiseOrValue<BigNumberish>[],
    _feesTbps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBrokerVolumeTiers(
    _tiers: PromiseOrValue<BigNumberish>[],
    _feesTbps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegate(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyState(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesForDesignation(
    _designations: PromiseOrValue<BigNumberish>[],
    _fees: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitialVolumeForFee(
    _poolId: PromiseOrValue<BigNumberish>,
    _brokerAddr: PromiseOrValue<string>,
    _feeTbps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNormalState(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleFactory(
    _oracleFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleFactoryForPerpetual(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _oracleAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOrderBookFactory(
    _orderBookFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerpetualBaseParams(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _baseParams: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerpetualOracles(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerpetualParam(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _varName: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerpetualParamPair(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _value1: PromiseOrValue<BigNumberish>,
    _value2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerpetualPoolFactory(
    _shareTokenFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerpetualRiskParams(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _underlyingRiskParams: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolParam(
    _poolId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTraderTiers(
    _tiers: PromiseOrValue<BigNumberish>[],
    _feesTbps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTraderVolumeTiers(
    _tiers: PromiseOrValue<BigNumberish>[],
    _feesTbps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilityTokenAddr(
    tokenAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    _perpetualID: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleNextTraderInPool(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  splitProtocolFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  togglePerpEmergencyState(
    _perpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeViaOrderBook(
    _order: IPerpetualOrder.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferBrokerLots(
    _poolId: PromiseOrValue<BigNumberish>,
    _transferToAddr: PromiseOrValue<string>,
    _lots: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferBrokerOwnership(
    _poolId: PromiseOrValue<BigNumberish>,
    _transferToAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferEarningsToTreasury(
    _poolId: PromiseOrValue<BigNumberish>,
    _fAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferValueToTreasury(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAMMTargetFundSize(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDefaultFundTargetSize(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDefaultFundTargetSizeRandom(
    _iPoolIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFundingAndPricesAfter(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFundingAndPricesBefore(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _revertIfClosed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeeds(
    _perpetualId: PromiseOrValue<BigNumberish>,
    _updateData: PromiseOrValue<BytesLike>[],
    _publishTimes: PromiseOrValue<BigNumberish>[],
    _maxAcceptableFeedAge: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVolumeEMAOnNewTrade(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _brokerAddr: PromiseOrValue<string>,
    _tradeAmountBC: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateStopPrice(
    _isLong: PromiseOrValue<boolean>,
    _fMarkPrice: PromiseOrValue<BigNumberish>,
    _fTriggerPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  withdraw(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _fAmount: PromiseOrValue<BigNumberish>,
    _updateData: PromiseOrValue<BytesLike>[],
    _publishTimes: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    _updateData: PromiseOrValue<BytesLike>[],
    _publishTimes: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawDepositFromMarginAccount(
    _iPerpetualId: PromiseOrValue<BigNumberish>,
    _traderAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromDefaultFund(
    _poolId: PromiseOrValue<BigNumberish>,
    _fAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    _iPoolIndex: PromiseOrValue<BigNumberish>,
    _shareAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activatePerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustSettlementPrice(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fSettlementS2: PromiseOrValue<BigNumberish>,
      _fSettlementS3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateDefaultFundSize(
      _fK2AMM: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _fk2Trader: PromiseOrValue<BigNumberish>,
      _fCoverN: PromiseOrValue<BigNumberish>,
      fStressRet2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fStressRet3: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fIndexPrices: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _eCCY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePerpetualPrice(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fBidAskSpread: PromiseOrValue<BigNumberish>,
      _fIncentiveSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRiskNeutralPD(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _withCDF: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    countActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLiquidityPool(
      _marginTokenAddress: PromiseOrValue<string>,
      _iTargetPoolSizeUpdateTime: PromiseOrValue<BigNumberish>,
      _fBrokerCollateralLotSize: PromiseOrValue<BigNumberish>,
      _fCeilPnLShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    createPerpetual(
      _iPoolId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseParams: PromiseOrValue<BigNumberish>[],
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      _eCollateralCurrency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivatePerp(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _iLots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMarginForOpeningTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fDepositRequired: PromiseOrValue<BigNumberish>,
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositToDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    determineExchangeFee(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    distributeFees(
      _order: IPerpetualOrder.OrderStruct,
      _brkrFeeTbps: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      _hasOpened: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeFeesLiquidation(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fDeltaPositionBC: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeCancelOrder(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeLiquidityWithdrawal(
      _poolId: PromiseOrValue<BigNumberish>,
      _lpAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fTraderPos: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _isClose: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAMMPerpLogic(overrides?: CallOverrides): Promise<string>;

    getAMMState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getActivePerpAccountsByChunks(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBrokerDesignation(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getBrokerInducedFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getCollateralTokenAmountForPricing(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmountForLvgPosition(
      _fPosition0: PromiseOrValue<BigNumberish>,
      _fBalance0: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fTargetLeverage: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _fS2Mark: PromiseOrValue<BigNumberish>,
      _fS3: PromiseOrValue<BigNumberish>,
      _fS2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeForBrokerDesignation(
      _brokerDesignation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getFeeForBrokerStake(
      brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getFeeForBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getFeeForTraderStake(
      traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getFeeForTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getLastPerpetualBaseToUSDConversion(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidatableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getLiquidityPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PerpStorage.LiquidityPoolDataStructOutput>;

    getLiquidityPools(
      _poolIdFrom: PromiseOrValue<BigNumberish>,
      _poolIdTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PerpStorage.LiquidityPoolDataStructOutput[]>;

    getMarginAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PerpStorage.MarginAccountStructOutput>;

    getMaxSignedOpenTradeSizeForPos(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fCurrentTraderPos: PromiseOrValue<BigNumberish>,
      _isBuy: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextLiquidatableTrader(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<string>;

    getOracleFactory(overrides?: CallOverrides): Promise<string>;

    getOraclePrice(
      _baseQuote: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleUpdateTime(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBookAddress(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOrderBookFactoryAddress(overrides?: CallOverrides): Promise<string>;

    getPerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PerpStorage.PerpetualDataStructOutput>;

    getPerpetualCountInPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPerpetualId(
      _poolId: PromiseOrValue<BigNumberish>,
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPerpetualStaticInfo(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IPerpetualInfo.PerpetualStaticInfoStructOutput[]>;

    getPerpetuals(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PerpStorage.PerpetualDataStructOutput[]>;

    getPoolCount(overrides?: CallOverrides): Promise<number>;

    getPoolIdByPerpetualId(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPoolStaticInfo(
      _poolFromIdx: PromiseOrValue<BigNumberish>,
      _poolToIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[][], string[], string[], string] & {
        _oracleFactoryAddress: string;
      }
    >;

    getPriceInfo(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], boolean[]]>;

    getSettleableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getShareTokenFactory(overrides?: CallOverrides): Promise<string>;

    getShareTokenPriceD18(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCollateralM1(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCollateralM2(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCollateralM3(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmountToReturn(
      _poolId: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

    getWithdrawRequests(
      poolId: PromiseOrValue<BigNumberish>,
      _fromIdx: PromiseOrValue<BigNumberish>,
      numRequests: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPerpetualTreasury.WithdrawRequestStructOutput[]>;

    increasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDelegate(
      _trader: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketClosed(
      _baseCurrency: PromiseOrValue<BytesLike>,
      _quoteCurrency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOrderCanceled(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOrderExecuted(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPerpMarketClosed(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateByAMM(
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      _liquidatorAddr: PromiseOrValue<string>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseLiquidityProvision(
      _poolId: PromiseOrValue<BigNumberish>,
      _pauseOn: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    preTrade(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    queryExchangeFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    queryMidPrices(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      idxPriceDataPairs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    queryPerpetualPrice(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fTradeAmountBC: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reduceMarginCollateral(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDelegate(overrides?: CallOverrides): Promise<void>;

    runLiquidityPool(
      _liqPoolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAMMPerpLogic(
      _AMMPerpLogic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBrokerTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBrokerVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesForDesignation(
      _designations: PromiseOrValue<BigNumberish>[],
      _fees: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialVolumeForFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      _feeTbps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNormalState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleFactory(
      _oracleFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleFactoryForPerpetual(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _oracleAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderBookFactory(
      _orderBookFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualBaseParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseParams: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualOracles(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualParam(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _varName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualParamPair(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value1: PromiseOrValue<BigNumberish>,
      _value2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualPoolFactory(
      _shareTokenFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualRiskParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilityTokenAddr(
      tokenAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      _perpetualID: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleNextTraderInPool(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    splitProtocolFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    togglePerpEmergencyState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeViaOrderBook(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      _lots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBrokerOwnership(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferEarningsToTreasury(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferValueToTreasury(overrides?: CallOverrides): Promise<boolean>;

    updateAMMTargetFundSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDefaultFundTargetSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDefaultFundTargetSizeRandom(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFundingAndPricesAfter(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFundingAndPricesBefore(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _revertIfClosed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeeds(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      _maxAcceptableFeedAge: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVolumeEMAOnNewTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      _tradeAmountBC: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateStopPrice(
      _isLong: PromiseOrValue<boolean>,
      _fMarkPrice: PromiseOrValue<BigNumberish>,
      _fTriggerPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDepositFromMarginAccount(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BrokerLotsTransferred(uint8,address,address,uint32)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      oldOwner?: null,
      newOwner?: null,
      numLots?: null
    ): BrokerLotsTransferredEventFilter;
    BrokerLotsTransferred(
      poolId?: PromiseOrValue<BigNumberish> | null,
      oldOwner?: null,
      newOwner?: null,
      numLots?: null
    ): BrokerLotsTransferredEventFilter;

    "BrokerVolumeTransferred(uint8,address,address,int128)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      oldOwner?: null,
      newOwner?: null,
      fVolume?: null
    ): BrokerVolumeTransferredEventFilter;
    BrokerVolumeTransferred(
      poolId?: PromiseOrValue<BigNumberish> | null,
      oldOwner?: null,
      newOwner?: null,
      fVolume?: null
    ): BrokerVolumeTransferredEventFilter;

    "Clear(uint24,address)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null
    ): ClearEventFilter;
    Clear(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null
    ): ClearEventFilter;

    "DistributeFees(uint8,uint24,address,int128,int128)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      protocolFeeCC?: null,
      participationFundFeeCC?: null
    ): DistributeFeesEventFilter;
    DistributeFees(
      poolId?: PromiseOrValue<BigNumberish> | null,
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      protocolFeeCC?: null,
      participationFundFeeCC?: null
    ): DistributeFeesEventFilter;

    "Liquidate(uint24,address,address,int128,int128,int128,int128,int128)"(
      perpetualId?: null,
      liquidator?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      amountLiquidatedBC?: null,
      liquidationPrice?: null,
      newPositionSizeBC?: null,
      fFeeCC?: null,
      fPnlCC?: null
    ): LiquidateEventFilter;
    Liquidate(
      perpetualId?: null,
      liquidator?: PromiseOrValue<string> | null,
      trader?: PromiseOrValue<string> | null,
      amountLiquidatedBC?: null,
      liquidationPrice?: null,
      newPositionSizeBC?: null,
      fFeeCC?: null,
      fPnlCC?: null
    ): LiquidateEventFilter;

    "LiquidityAdded(uint8,address,uint256,uint256)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      shareAmount?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      poolId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      shareAmount?: null
    ): LiquidityAddedEventFilter;

    "LiquidityPoolCreated(uint8,address,address,uint16,int128)"(
      id?: null,
      marginTokenAddress?: null,
      shareTokenAddress?: null,
      iTargetPoolSizeUpdateTime?: null,
      fBrokerCollateralLotSize?: null
    ): LiquidityPoolCreatedEventFilter;
    LiquidityPoolCreated(
      id?: null,
      marginTokenAddress?: null,
      shareTokenAddress?: null,
      iTargetPoolSizeUpdateTime?: null,
      fBrokerCollateralLotSize?: null
    ): LiquidityPoolCreatedEventFilter;

    "LiquidityProvisionPaused(bool,uint8)"(
      pauseOn?: null,
      poolId?: null
    ): LiquidityProvisionPausedEventFilter;
    LiquidityProvisionPaused(
      pauseOn?: null,
      poolId?: null
    ): LiquidityProvisionPausedEventFilter;

    "LiquidityRemoved(uint8,address,uint256,uint256)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      shareAmount?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      poolId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      shareAmount?: null
    ): LiquidityRemovedEventFilter;

    "LiquidityWithdrawalInitiated(uint8,address,uint256)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      shareAmount?: null
    ): LiquidityWithdrawalInitiatedEventFilter;
    LiquidityWithdrawalInitiated(
      poolId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      shareAmount?: null
    ): LiquidityWithdrawalInitiatedEventFilter;

    "PerpetualCreated(uint8,uint24,int128[7],int128[5],int128[12],uint256)"(
      poolId?: null,
      id?: null,
      baseParams?: null,
      underlyingRiskParams?: null,
      defaultFundRiskParams?: null,
      eCollateralCurrency?: null
    ): PerpetualCreatedEventFilter;
    PerpetualCreated(
      poolId?: null,
      id?: null,
      baseParams?: null,
      underlyingRiskParams?: null,
      defaultFundRiskParams?: null,
      eCollateralCurrency?: null
    ): PerpetualCreatedEventFilter;

    "PerpetualLimitOrderCancelled(uint24,bytes32)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      orderHash?: PromiseOrValue<BytesLike> | null
    ): PerpetualLimitOrderCancelledEventFilter;
    PerpetualLimitOrderCancelled(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      orderHash?: PromiseOrValue<BytesLike> | null
    ): PerpetualLimitOrderCancelledEventFilter;

    "RunLiquidityPool(uint8)"(_liqPoolID?: null): RunLiquidityPoolEventFilter;
    RunLiquidityPool(_liqPoolID?: null): RunLiquidityPoolEventFilter;

    "SetBlockDelay(uint8)"(delay?: null): SetBlockDelayEventFilter;
    SetBlockDelay(delay?: null): SetBlockDelayEventFilter;

    "SetBrokerDesignations(uint32[],uint16[])"(
      designations?: null,
      fees?: null
    ): SetBrokerDesignationsEventFilter;
    SetBrokerDesignations(
      designations?: null,
      fees?: null
    ): SetBrokerDesignationsEventFilter;

    "SetBrokerTiers(uint256[],uint16[])"(
      tiers?: null,
      feesTbps?: null
    ): SetBrokerTiersEventFilter;
    SetBrokerTiers(tiers?: null, feesTbps?: null): SetBrokerTiersEventFilter;

    "SetBrokerVolumeTiers(uint256[],uint16[])"(
      tiers?: null,
      feesTbps?: null
    ): SetBrokerVolumeTiersEventFilter;
    SetBrokerVolumeTiers(
      tiers?: null,
      feesTbps?: null
    ): SetBrokerVolumeTiersEventFilter;

    "SetClearedState(uint24)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SetClearedStateEventFilter;
    SetClearedState(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SetClearedStateEventFilter;

    "SetDelegate(address,address)"(
      trader?: null,
      delegate?: null
    ): SetDelegateEventFilter;
    SetDelegate(trader?: null, delegate?: null): SetDelegateEventFilter;

    "SetEmergencyState(uint24,int128,int128,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      fSettlementMarkPremiumRate?: null,
      fSettlementS2Price?: null,
      fSettlementS3Price?: null
    ): SetEmergencyStateEventFilter;
    SetEmergencyState(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      fSettlementMarkPremiumRate?: null,
      fSettlementS2Price?: null,
      fSettlementS3Price?: null
    ): SetEmergencyStateEventFilter;

    "SetNormalState(uint24)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SetNormalStateEventFilter;
    SetNormalState(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SetNormalStateEventFilter;

    "SetOracles(uint24,bytes4[2],bytes4[2])"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      baseQuoteS2?: null,
      baseQuoteS3?: null
    ): SetOraclesEventFilter;
    SetOracles(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      baseQuoteS2?: null,
      baseQuoteS3?: null
    ): SetOraclesEventFilter;

    "SetParameter(uint24,string,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      value?: null
    ): SetParameterEventFilter;
    SetParameter(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      value?: null
    ): SetParameterEventFilter;

    "SetParameterPair(uint24,string,int128,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      value1?: null,
      value2?: null
    ): SetParameterPairEventFilter;
    SetParameterPair(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      value1?: null,
      value2?: null
    ): SetParameterPairEventFilter;

    "SetPerpetualBaseParameters(uint24,int128[7])"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      baseParams?: null
    ): SetPerpetualBaseParametersEventFilter;
    SetPerpetualBaseParameters(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      baseParams?: null
    ): SetPerpetualBaseParametersEventFilter;

    "SetPerpetualRiskParameters(uint24,int128[5],int128[12])"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      underlyingRiskParams?: null,
      defaultFundRiskParams?: null
    ): SetPerpetualRiskParametersEventFilter;
    SetPerpetualRiskParameters(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      underlyingRiskParams?: null,
      defaultFundRiskParams?: null
    ): SetPerpetualRiskParametersEventFilter;

    "SetPoolParameter(uint8,string,int128)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      value?: null
    ): SetPoolParameterEventFilter;
    SetPoolParameter(
      poolId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      value?: null
    ): SetPoolParameterEventFilter;

    "SetTraderTiers(uint256[],uint16[])"(
      tiers?: null,
      feesTbps?: null
    ): SetTraderTiersEventFilter;
    SetTraderTiers(tiers?: null, feesTbps?: null): SetTraderTiersEventFilter;

    "SetTraderVolumeTiers(uint256[],uint16[])"(
      tiers?: null,
      feesTbps?: null
    ): SetTraderVolumeTiersEventFilter;
    SetTraderVolumeTiers(
      tiers?: null,
      feesTbps?: null
    ): SetTraderVolumeTiersEventFilter;

    "SetUtilityToken(address)"(tokenAddr?: null): SetUtilityTokenEventFilter;
    SetUtilityToken(tokenAddr?: null): SetUtilityTokenEventFilter;

    "Settle(uint24,address,int256)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): SettleEventFilter;
    Settle(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): SettleEventFilter;

    "SettleState(uint24)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SettleStateEventFilter;
    SettleState(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SettleStateEventFilter;

    "SettlementComplete(uint24)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SettlementCompleteEventFilter;
    SettlementComplete(
      perpetualId?: PromiseOrValue<BigNumberish> | null
    ): SettlementCompleteEventFilter;

    "TokensDeposited(uint24,address,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensDepositedEventFilter;
    TokensDeposited(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensDepositedEventFilter;

    "TokensWithdrawn(uint24,address,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensWithdrawnEventFilter;

    "Trade(uint24,address,tuple,bytes32,int128,int128,int128,int128,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      order?: null,
      orderDigest?: null,
      newPositionSizeBC?: null,
      price?: null,
      fFeeCC?: null,
      fPnlCC?: null,
      fB2C?: null
    ): TradeEventFilter;
    Trade(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      order?: null,
      orderDigest?: null,
      newPositionSizeBC?: null,
      price?: null,
      fFeeCC?: null,
      fPnlCC?: null,
      fB2C?: null
    ): TradeEventFilter;

    "TransferAddressTo(string,address,address)"(
      name?: null,
      oldOBFactory?: null,
      newOBFactory?: null
    ): TransferAddressToEventFilter;
    TransferAddressTo(
      name?: null,
      oldOBFactory?: null,
      newOBFactory?: null
    ): TransferAddressToEventFilter;

    "UpdateBrokerAddedCash(uint8,uint32,uint32)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      iLots?: null,
      iNewBrokerLots?: null
    ): UpdateBrokerAddedCashEventFilter;
    UpdateBrokerAddedCash(
      poolId?: PromiseOrValue<BigNumberish> | null,
      iLots?: null,
      iNewBrokerLots?: null
    ): UpdateBrokerAddedCashEventFilter;

    "UpdateFundingRate(uint24,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      fFundingRate?: null
    ): UpdateFundingRateEventFilter;
    UpdateFundingRate(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      fFundingRate?: null
    ): UpdateFundingRateEventFilter;

    "UpdateMarginAccount(uint24,address,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      fFundingPaymentCC?: null
    ): UpdateMarginAccountEventFilter;
    UpdateMarginAccount(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      fFundingPaymentCC?: null
    ): UpdateMarginAccountEventFilter;

    "UpdateMarkPrice(uint24,int128,int128,int128)"(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      fMidPricePremium?: null,
      fMarkPricePremium?: null,
      fSpotIndexPrice?: null
    ): UpdateMarkPriceEventFilter;
    UpdateMarkPrice(
      perpetualId?: PromiseOrValue<BigNumberish> | null,
      fMidPricePremium?: null,
      fMarkPricePremium?: null,
      fSpotIndexPrice?: null
    ): UpdateMarkPriceEventFilter;
  };

  estimateGas: {
    activatePerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adjustSettlementPrice(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fSettlementS2: PromiseOrValue<BigNumberish>,
      _fSettlementS3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateDefaultFundSize(
      _fK2AMM: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _fk2Trader: PromiseOrValue<BigNumberish>,
      _fCoverN: PromiseOrValue<BigNumberish>,
      fStressRet2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fStressRet3: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fIndexPrices: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _eCCY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePerpetualPrice(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fBidAskSpread: PromiseOrValue<BigNumberish>,
      _fIncentiveSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRiskNeutralPD(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _withCDF: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLiquidityPool(
      _marginTokenAddress: PromiseOrValue<string>,
      _iTargetPoolSizeUpdateTime: PromiseOrValue<BigNumberish>,
      _fBrokerCollateralLotSize: PromiseOrValue<BigNumberish>,
      _fCeilPnLShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPerpetual(
      _iPoolId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseParams: PromiseOrValue<BigNumberish>[],
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      _eCollateralCurrency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivatePerp(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _iLots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositMarginForOpeningTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fDepositRequired: PromiseOrValue<BigNumberish>,
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    determineExchangeFee(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeFees(
      _order: IPerpetualOrder.OrderStruct,
      _brkrFeeTbps: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      _hasOpened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeFeesLiquidation(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fDeltaPositionBC: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeCancelOrder(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _digest: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeLiquidityWithdrawal(
      _poolId: PromiseOrValue<BigNumberish>,
      _lpAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fTraderPos: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _isClose: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAMMPerpLogic(overrides?: CallOverrides): Promise<BigNumber>;

    getAMMState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePerpAccountsByChunks(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBrokerDesignation(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBrokerInducedFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralTokenAmountForPricing(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmountForLvgPosition(
      _fPosition0: PromiseOrValue<BigNumberish>,
      _fBalance0: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fTargetLeverage: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _fS2Mark: PromiseOrValue<BigNumberish>,
      _fS3: PromiseOrValue<BigNumberish>,
      _fS2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeForBrokerDesignation(
      _brokerDesignation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeForBrokerStake(
      brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeForBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeForTraderStake(
      traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeForTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastPerpetualBaseToUSDConversion(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidatableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPools(
      _poolIdFrom: PromiseOrValue<BigNumberish>,
      _poolIdTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSignedOpenTradeSizeForPos(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fCurrentTraderPos: PromiseOrValue<BigNumberish>,
      _isBuy: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextLiquidatableTrader(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePrice(
      _baseQuote: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleUpdateTime(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBookAddress(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBookFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerpetualCountInPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerpetualId(
      _poolId: PromiseOrValue<BigNumberish>,
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerpetualStaticInfo(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerpetuals(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolIdByPerpetualId(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolStaticInfo(
      _poolFromIdx: PromiseOrValue<BigNumberish>,
      _poolToIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceInfo(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettleableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShareTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getShareTokenPriceD18(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCollateralM1(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCollateralM2(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCollateralM3(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmountToReturn(
      _poolId: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawRequests(
      poolId: PromiseOrValue<BigNumberish>,
      _fromIdx: PromiseOrValue<BigNumberish>,
      numRequests: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isActiveAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDelegate(
      _trader: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketClosed(
      _baseCurrency: PromiseOrValue<BytesLike>,
      _quoteCurrency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOrderCanceled(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOrderExecuted(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPerpMarketClosed(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateByAMM(
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      _liquidatorAddr: PromiseOrValue<string>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseLiquidityProvision(
      _poolId: PromiseOrValue<BigNumberish>,
      _pauseOn: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    preTrade(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryExchangeFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryMidPrices(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      idxPriceDataPairs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryPerpetualPrice(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fTradeAmountBC: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalance(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reduceMarginCollateral(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeDelegate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    runLiquidityPool(
      _liqPoolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAMMPerpLogic(
      _AMMPerpLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlockDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBrokerTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBrokerVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesForDesignation(
      _designations: PromiseOrValue<BigNumberish>[],
      _fees: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitialVolumeForFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      _feeTbps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNormalState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleFactory(
      _oracleFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleFactoryForPerpetual(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _oracleAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOrderBookFactory(
      _orderBookFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerpetualBaseParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseParams: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerpetualOracles(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerpetualParam(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _varName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerpetualParamPair(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value1: PromiseOrValue<BigNumberish>,
      _value2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerpetualPoolFactory(
      _shareTokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerpetualRiskParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTraderTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTraderVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilityTokenAddr(
      tokenAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      _perpetualID: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleNextTraderInPool(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    splitProtocolFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    togglePerpEmergencyState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeViaOrderBook(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      _lots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferBrokerOwnership(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferEarningsToTreasury(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferValueToTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAMMTargetFundSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDefaultFundTargetSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDefaultFundTargetSizeRandom(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFundingAndPricesAfter(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFundingAndPricesBefore(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _revertIfClosed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePriceFeeds(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      _maxAcceptableFeedAge: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVolumeEMAOnNewTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      _tradeAmountBC: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateStopPrice(
      _isLong: PromiseOrValue<boolean>,
      _fMarkPrice: PromiseOrValue<BigNumberish>,
      _fTriggerPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawDepositFromMarginAccount(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activatePerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adjustSettlementPrice(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fSettlementS2: PromiseOrValue<BigNumberish>,
      _fSettlementS3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateDefaultFundSize(
      _fK2AMM: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _fk2Trader: PromiseOrValue<BigNumberish>,
      _fCoverN: PromiseOrValue<BigNumberish>,
      fStressRet2: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fStressRet3: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      fIndexPrices: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _eCCY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePerpetualPrice(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fBidAskSpread: PromiseOrValue<BigNumberish>,
      _fIncentiveSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRiskNeutralPD(
      _ammVars: AMMPerpLogic.AMMVariablesStruct,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _withCDF: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLiquidityPool(
      _marginTokenAddress: PromiseOrValue<string>,
      _iTargetPoolSizeUpdateTime: PromiseOrValue<BigNumberish>,
      _fBrokerCollateralLotSize: PromiseOrValue<BigNumberish>,
      _fCeilPnLShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPerpetual(
      _iPoolId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseParams: PromiseOrValue<BigNumberish>[],
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      _eCollateralCurrency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivatePerp(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _iLots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositMarginForOpeningTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fDepositRequired: PromiseOrValue<BigNumberish>,
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    determineExchangeFee(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeFees(
      _order: IPerpetualOrder.OrderStruct,
      _brkrFeeTbps: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      _hasOpened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeFeesLiquidation(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fDeltaPositionBC: PromiseOrValue<BigNumberish>,
      _protocolFeeTbps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeCancelOrder(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _digest: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeLiquidityWithdrawal(
      _poolId: PromiseOrValue<BigNumberish>,
      _lpAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fTraderPos: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _isClose: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAMMPerpLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAMMState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePerpAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePerpAccountsByChunks(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBrokerDesignation(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBrokerInducedFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralTokenAmountForPricing(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositAmountForLvgPosition(
      _fPosition0: PromiseOrValue<BigNumberish>,
      _fBalance0: PromiseOrValue<BigNumberish>,
      _fTradeAmount: PromiseOrValue<BigNumberish>,
      _fTargetLeverage: PromiseOrValue<BigNumberish>,
      _fPrice: PromiseOrValue<BigNumberish>,
      _fS2Mark: PromiseOrValue<BigNumberish>,
      _fS3: PromiseOrValue<BigNumberish>,
      _fS2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeForBrokerDesignation(
      _brokerDesignation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeForBrokerStake(
      brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeForBrokerVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeForTraderStake(
      traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeForTraderVolume(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastPerpetualBaseToUSDConversion(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidatableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPools(
      _poolIdFrom: PromiseOrValue<BigNumberish>,
      _poolIdTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSignedOpenTradeSizeForPos(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fCurrentTraderPos: PromiseOrValue<BigNumberish>,
      _isBuy: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextLiquidatableTrader(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOraclePrice(
      _baseQuote: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleUpdateTime(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBookAddress(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBookFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetual(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetualCountInPool(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetualId(
      _poolId: PromiseOrValue<BigNumberish>,
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetualStaticInfo(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetuals(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolIdByPerpetualId(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolStaticInfo(
      _poolFromIdx: PromiseOrValue<BigNumberish>,
      _poolToIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceInfo(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettleableAccounts(
      _perpetualId: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShareTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShareTokenPriceD18(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetCollateralM1(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetCollateralM2(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetCollateralM3(
      _fK2: PromiseOrValue<BigNumberish>,
      _fL1: PromiseOrValue<BigNumberish>,
      _mktVars: AMMPerpLogic.MarketVariablesStruct,
      _fTargetDD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmountToReturn(
      _poolId: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawRequests(
      poolId: PromiseOrValue<BigNumberish>,
      _fromIdx: PromiseOrValue<BigNumberish>,
      numRequests: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePoolCash(
      _iPoolIdx: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isActiveAccount(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _traderAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDelegate(
      _trader: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketClosed(
      _baseCurrency: PromiseOrValue<BytesLike>,
      _quoteCurrency: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOrderCanceled(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOrderExecuted(
      digest: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPerpMarketClosed(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateByAMM(
      _perpetualIndex: PromiseOrValue<BigNumberish>,
      _liquidatorAddr: PromiseOrValue<string>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseLiquidityProvision(
      _poolId: PromiseOrValue<BigNumberish>,
      _pauseOn: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    preTrade(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryExchangeFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryMidPrices(
      perpetualIds: PromiseOrValue<BigNumberish>[],
      idxPriceDataPairs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryPerpetualPrice(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _fTradeAmountBC: PromiseOrValue<BigNumberish>,
      _fIndexPrice: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reduceMarginCollateral(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeDelegate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    runLiquidityPool(
      _liqPoolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAMMPerpLogic(
      _AMMPerpLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlockDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBrokerTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBrokerVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesForDesignation(
      _designations: PromiseOrValue<BigNumberish>[],
      _fees: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitialVolumeForFee(
      _poolId: PromiseOrValue<BigNumberish>,
      _brokerAddr: PromiseOrValue<string>,
      _feeTbps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNormalState(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleFactory(
      _oracleFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleFactoryForPerpetual(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _oracleAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOrderBookFactory(
      _orderBookFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualBaseParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseParams: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualOracles(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _baseQuoteS2: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      _baseQuoteS3: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualParam(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _varName: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualParamPair(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value1: PromiseOrValue<BigNumberish>,
      _value2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualPoolFactory(
      _shareTokenFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerpetualRiskParams(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _underlyingRiskParams: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _defaultFundRiskParams: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolParam(
      _poolId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTraderTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTraderVolumeTiers(
      _tiers: PromiseOrValue<BigNumberish>[],
      _feesTbps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilityTokenAddr(
      tokenAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      _perpetualID: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleNextTraderInPool(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    splitProtocolFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    togglePerpEmergencyState(
      _perpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeViaOrderBook(
      _order: IPerpetualOrder.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferBrokerLots(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      _lots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferBrokerOwnership(
      _poolId: PromiseOrValue<BigNumberish>,
      _transferToAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferEarningsToTreasury(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferValueToTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAMMTargetFundSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDefaultFundTargetSize(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDefaultFundTargetSizeRandom(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFundingAndPricesAfter(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFundingAndPricesBefore(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _revertIfClosed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeeds(
      _perpetualId: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      _maxAcceptableFeedAge: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVolumeEMAOnNewTrade(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _brokerAddr: PromiseOrValue<string>,
      _tradeAmountBC: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateStopPrice(
      _isLong: PromiseOrValue<boolean>,
      _fMarkPrice: PromiseOrValue<BigNumberish>,
      _fTriggerPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _fAmount: PromiseOrValue<BigNumberish>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      _updateData: PromiseOrValue<BytesLike>[],
      _publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDepositFromMarginAccount(
      _iPerpetualId: PromiseOrValue<BigNumberish>,
      _traderAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromDefaultFund(
      _poolId: PromiseOrValue<BigNumberish>,
      _fAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      _iPoolIndex: PromiseOrValue<BigNumberish>,
      _shareAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
